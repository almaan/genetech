i
BiocManager::install("BiocStyle")
knitr::opts_chunk$set(echo = TRUE)
#The following packages should be loaded. Remember, if you havn't installed a specific package, use `BiocManager::install("packageName")`. When running this, you often get asked "Update all/some/none? [a/s/n]:" In general, it's ok to skip updating the rest of the packages for this lab (which can otherwise take some time).
library(ggbio)
library(GenomicRanges)
library(snpStats)
library(SNPRelate)
library(dplyr)
# PCA
# set random seed for reproducibility
set.seed(100)
# conduct pca
pca <- snpgdsPCA(genofile, sample.id = geno.sample.ids,
snp.id = snpset.ibd, num.thread = 1)
# QQ plot using GenABEL estlambda function
png(paste(target, "_QQplot.png", sep = ""), width = 500, height = 500)
help(GWASout)
# Manhattan plot
GWASout <- read.table(paste(target, ".txt", sep = ""), header = T,
colClasses = c("character", rep("numeric",4)))
# Choose trait for association analysis, use colnames(genData$LIP) for listing
# NOTE: Ignore the first column of genData$LIP (gender)
target <- "Cholesterol"
phenodata <- data.frame("id" = rownames(genData$LIP),
"phenotype" = scale(genData$LIP[,target]),
stringsAsFactors = F)
knitr::opts_chunk$set(echo = TRUE, eval=FALSE)
counts <- as.matrix(read.table("data/RNAseq_mouse_ensembl_rawCounts.csv",
sep="\t",
row.names = 1,
stringsAsFactors = F,
header = T))
grep <- grepl(colnames(counts), pattern="Control*")
counts <- counts[, !grep]
treatment <- sapply(strsplit(colnames(counts), "_"), "[[", 2)
outcome <- sapply(strsplit(colnames(counts), "_"), "[[", 3)
replicate <- sapply(strsplit(colnames(counts), "_"), "[[", 4)
metadata <- as.data.frame(cbind(treatment, outcome, replicate))
library(SummarizedExperiment)
library(DESeq2)
library(SummarizedExperiment)
library(DESeq2)
BiocManager::install("DESeq2")
library(SummarizedExperiment)
library(DESeq2)
library(SummarizedExperiment)
library(DESeq2)
knitr::opts_chunk$set(echo = TRUE, eval=FALSE)
library(SummarizedExperiment)
library(DESeq2)
outcome <- sapply(strsplit(colnames(counts), "_"), "[[", 3)
library(pheatmap)
library(ggplot2)
library(viridis)
counts <- as.matrix(read.table("data/RNAseq_mouse_ensembl_rawCounts.csv",
sep="\t",
row.names = 1,
stringsAsFactors = F,
header = T))
grep <- grepl(colnames(counts), pattern="Control*")
counts <- counts[, !grep]
treatment <- sapply(strsplit(colnames(counts), "_"), "[[", 2)
outcome <- sapply(strsplit(colnames(counts), "_"), "[[", 3)
replicate <- sapply(strsplit(colnames(counts), "_"), "[[", 4)
metadata <- as.data.frame(cbind(treatment, outcome, replicate))
metadata
head(metadata)
?SummarizedExperiment
se <- SummarizedExperiment(assays = counts,metadata = metadata)
se
se@assays
se@assays[,]
se@assays
assays(se)
assays(se)$counts
a
se <- SummarizedExperiment(assays = assay(counts),metadata = metadata)
se <- SummarizedExperiment(assays = list(counts),metadata = metadata)
se@assays
se@assays$counts
se@assays
asssay(se)$counts
assay(se)$counts
assay(se)
se <- SummarizedExperiment(assays = list(count = counts),metadata = metadata)
se@assay$counts
assay(se)
assay(se)
head(assay(se))
library(airway)
data(airway)
airway
assays(airway)
assays(airway)$counts
se <- SummarizedExperiment(assays = list(counts = counts),metadata = metadata)
se
rowSums(se)
rowSums(se$assays$counts)
rowSums(se@assays$counts)
se@assays
se@assays$counts
se@assays["counts"]
se@assays
str(se@assays)
rowSums(assay(se)$counts) <= 10
rowSums(assays(se)$counts) <= 10
l10 <- rowSums(assays(se)$counts) <= 10
sub_se <- se[l10,]
sub_se
se
rowData(se)
rowData(se)$counts
se
?subset
se@metadata
100 / 723
