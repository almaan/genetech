g <- ggplot(data = se@meta.data )
if (!(is.null(img))) {
img.grob <- rasterGrob(img,
width = unit(1, "npc"),
height = unit(1, "npc"),
interpolate = TRUE)
g <- g +  annotation_custom(img.grob,
xmin = -Inf,
xmax = Inf,
ymin = -Inf,
ymax = Inf) +
scale_x_continuous(limits = c(0, dim(img)[2]),
expand = c(0, 0)) +
scale_y_continuous(limits = c(0, dim(img)[1]),
expand = c(0, 0))
}
g <- g + geom_point(mapping = aes(x = x,
y = y,
color = color.vector),
pch = 20,
size = size,
alpha = alpha
)
if (color.type == "categorical") {
g <- g+ scale_colour_brewer(palette = "Set1")
} else {
g <- g+ scale_color_gradient(low = ifelse(is.null(img),"orange","white"),
high = "red"
)
}
g <- g+       labs(colour = legend.title,
title = plot.title
) +
theme_void() +
theme(plot.margin = unit(c(0.05, 0.05, 0.05, 0.05), "npc"))+
coord_fixed()
return(g)
}
?RunUMAP
?FindNeighbors
se <- RunPCA(se,verbose = FALSE)
se <- RunUMAP(se,
dims = 1:30,
verbose = FALSE,
seed.use = 1337
)
se <- FindNeighbors(se,
dims = 1:30,
verbose = FALSE)
se <- FindClusters(se,
verbose = FALSE,
resolution = 0.5,
random.seed = 1337
)
se
DimPlot(se,label = TRUE)
gg <- spatial.plot(se,
img = img,
color.vector = se[[]]$SCT_snn_res.0.5,
color.type = "categorical"
)
print(gg)
viridis::viridis(10)
rainbow(10)
spatial.plot <- function(se,
img = NULL,
alpha = 1,
size = 1,
color.vector = NULL,
plot.title = "",
legend.title = "",
color.type = "continous"
) {
if (is.null(color.vector)) {
color.vector <- "black"
}
g <- ggplot(data = se@meta.data )
if (!(is.null(img))) {
img.grob <- rasterGrob(img,
width = unit(1, "npc"),
height = unit(1, "npc"),
interpolate = TRUE)
g <- g +  annotation_custom(img.grob,
xmin = -Inf,
xmax = Inf,
ymin = -Inf,
ymax = Inf) +
scale_x_continuous(limits = c(0, dim(img)[2]),
expand = c(0, 0)) +
scale_y_continuous(limits = c(0, dim(img)[1]),
expand = c(0, 0))
}
g <- g + geom_point(mapping = aes(x = x,
y = y,
color = color.vector),
pch = 20,
size = size,
alpha = alpha
)
if (color.type == "categorical") {
g <- g+ scale_colour_manual(values = rainbow(10))
} else {
g <- g+ scale_color_gradient(low = ifelse(is.null(img),"orange","white"),
high = "red"
)
}
g <- g+       labs(colour = legend.title,
title = plot.title
) +
theme_void() +
theme(plot.margin = unit(c(0.05, 0.05, 0.05, 0.05), "npc"))+
coord_fixed()
return(g)
}
library(scales)
hue_pal(10)
hue_pal()
hue_pal()(10)
spatial.plot <- function(se,
img = NULL,
alpha = 1,
size = 1,
color.vector = NULL,
plot.title = "",
legend.title = "",
color.type = "continous"
) {
if (is.null(color.vector)) {
color.vector <- "black"
}
g <- ggplot(data = se@meta.data )
if (!(is.null(img))) {
img.grob <- rasterGrob(img,
width = unit(1, "npc"),
height = unit(1, "npc"),
interpolate = TRUE)
g <- g +  annotation_custom(img.grob,
xmin = -Inf,
xmax = Inf,
ymin = -Inf,
ymax = Inf) +
scale_x_continuous(limits = c(0, dim(img)[2]),
expand = c(0, 0)) +
scale_y_continuous(limits = c(0, dim(img)[1]),
expand = c(0, 0))
}
g <- g + geom_point(mapping = aes(x = x,
y = y,
color = color.vector),
pch = 20,
size = size,
alpha = alpha
)
if (color.type == "categorical") {
n_col = length(unique(color.vector))
g <- g+ scale_colour_manual(values = scales::hue_pal(n_col))
} else {
g <- g+ scale_color_gradient(low = ifelse(is.null(img),"orange","white"),
high = "red"
)
}
g <- g+       labs(colour = legend.title,
title = plot.title
) +
theme_void() +
theme(plot.margin = unit(c(0.05, 0.05, 0.05, 0.05), "npc"))+
coord_fixed()
return(g)
}
gg <- spatial.plot(se,
img = img,
color.vector = se[[]]$SCT_snn_res.0.5,
color.type = "categorical"
)
spatial.plot <- function(se,
img = NULL,
alpha = 1,
size = 1,
color.vector = NULL,
plot.title = "",
legend.title = "",
color.type = "continous"
) {
if (is.null(color.vector)) {
color.vector <- "black"
}
g <- ggplot(data = se@meta.data )
if (!(is.null(img))) {
img.grob <- rasterGrob(img,
width = unit(1, "npc"),
height = unit(1, "npc"),
interpolate = TRUE)
g <- g +  annotation_custom(img.grob,
xmin = -Inf,
xmax = Inf,
ymin = -Inf,
ymax = Inf) +
scale_x_continuous(limits = c(0, dim(img)[2]),
expand = c(0, 0)) +
scale_y_continuous(limits = c(0, dim(img)[1]),
expand = c(0, 0))
}
g <- g + geom_point(mapping = aes(x = x,
y = y,
color = color.vector),
pch = 20,
size = size,
alpha = alpha
)
if (color.type == "categorical") {
n_col = length(unique(color.vector))
g <- g+ scale_colour_manual(values = scales::hue_pal()(n_col))
} else {
g <- g+ scale_color_gradient(low = ifelse(is.null(img),"orange","white"),
high = "red"
)
}
g <- g+       labs(colour = legend.title,
title = plot.title
) +
theme_void() +
theme(plot.margin = unit(c(0.05, 0.05, 0.05, 0.05), "npc"))+
coord_fixed()
return(g)
}
gg <- spatial.plot(se,
img = img,
color.vector = se[[]]$SCT_snn_res.0.5,
color.type = "categorical"
)
print(gg)
se <- RunPCA(se,verbose = FALSE)
se <- RunUMAP(se,
dims = 1:30,
verbose = FALSE,
seed.use = 1337
)
se <- FindNeighbors(se,
dims = 1:30,
verbose = FALSE)
se <- FindClusters(se,
verbose = FALSE,
resolution = 0.2,
random.seed = 1337
)
se
DimPlot(se,label = TRUE,color = rainbow(10))
DimPlot(se,label = TRUE)
gg <- spatial.plot(se,
img = img,
color.vector = se[[]]$SCT_snn_res.0.5,
color.type = "categorical"
)
print(gg)
gg <- spatial.plot(se,
img = img,
color.vector = se[[]]$SCT_snn_res.0.2,
color.type = "categorical"
)
print(gg)
se <- FindClusters(se,
verbose = FALSE,
resolution = 0.3,
random.seed = 1337
)
se
DimPlot(se,label = TRUE)
gg <- spatial.plot(se,
img = img,
color.vector = se[[]]$SCT_snn_res.0.3,
color.type = "categorical"
)
print(gg)
se <- FindClusters(se,
verbose = FALSE,
resolution = 0.5,
random.seed = 1337
)
se
n_clusters = unique(se[[]]$SCT_snn_res.0.5)
DimPlot(se,label = TRUE, cols = rainbow(n_clusters))
n_clusters = length(unique(se[[]]$SCT_snn_res.0.5))
DimPlot(se,label = TRUE, cols = rainbow(n_clusters))
spatial.plot <- function(se,
img = NULL,
alpha = 1,
size = 1,
color.vector = NULL,
plot.title = "",
legend.title = "",
color.type = "continous"
) {
if (is.null(color.vector)) {
color.vector <- "black"
}
g <- ggplot(data = se@meta.data )
if (!(is.null(img))) {
img.grob <- rasterGrob(img,
width = unit(1, "npc"),
height = unit(1, "npc"),
interpolate = TRUE)
g <- g +  annotation_custom(img.grob,
xmin = -Inf,
xmax = Inf,
ymin = -Inf,
ymax = Inf) +
scale_x_continuous(limits = c(0, dim(img)[2]),
expand = c(0, 0)) +
scale_y_continuous(limits = c(0, dim(img)[1]),
expand = c(0, 0))
}
g <- g + geom_point(mapping = aes(x = x,
y = y,
color = color.vector),
pch = 20,
size = size,
alpha = alpha
)
if (color.type == "categorical") {
n_col = length(unique(color.vector))
g <- g+ scale_colour_manual(values = rainbow(n_col))
} else {
g <- g+ scale_color_gradient(low = ifelse(is.null(img),"orange","white"),
high = "red"
)
}
g <- g+       labs(colour = legend.title,
title = plot.title
) +
theme_void() +
theme(plot.margin = unit(c(0.05, 0.05, 0.05, 0.05), "npc"))+
coord_fixed()
return(g)
}
gg <- spatial.plot(se,
img = img,
color.vector = se[[]]$SCT_snn_res.0.5,
color.type = "categorical"
)
print(gg)
de.markers <- FindAllMarkers(se,
assay = "SCT",
logfc.threshold = 1
)
de.markers
duplicated(se[[]]$SCT_snn_res.0.5)
de.markers[!duplicated(de.markers$cluster)]
de.markers[!duplicated(de.markers$cluster),]
de.markers
?FindMarkers
library(gridExtra)
de.markers.one <- de.markers[!duplicated(de.markers$cluster),]
plot.list <- list()
for (gene in names(de.markers.one)) {
expression.vector <- as.numeric(GetAssayData(se)[gene,])
plot.list[[gene]] <- spatial.plot(se,
plot.title = gene)
}
GetAssayData(se)[gene,]
gene
de.markers.one <- de.markers[!duplicated(de.markers$cluster),]
library(gridExtra)
de.markers.one <- de.markers[!duplicated(de.markers$cluster),]
plot.list <- list()
for (gene in rownames(de.markers.one)) {
expression.vector <- as.numeric(GetAssayData(se)[gene,])
plot.list[[gene]] <- spatial.plot(se,
plot.title = gene)
}
gene
GetAssayData(se)[gene,]
GetAssayData(se)
GetAssayData(se)[gene,]
GetAssayData(se)[gene,]
GetAssayData(se)[gene,]
se@assays$SCT[gene,]
de.markers.one
library(gridExtra)
de.markers.one <- de.markers[!duplicated(de.markers$cluster),]
plot.list <- list()
for (gene in de.markers.one$gene) {
expression.vector <- as.numeric(GetAssayData(se)[gene,])
plot.list[[gene]] <- spatial.plot(se,
plot.title = gene)
}
p <- grid.arrange(grobs = plot.list,ncol = 4)
plot.list
names(plot.list)
p <- grid.arrange(grobs = plot.list)
plot.list
expression.vector
library(gridExtra)
de.markers.one <- de.markers[!duplicated(de.markers$cluster),]
plot.list <- list()
for (gene in de.markers.one$gene) {
expression.vector <- as.numeric(GetAssayData(se)[gene,])
plot.list[[gene]] <- spatial.plot(se,
plot.title = gene,
color.vector = expression.vector
)
}
p <- grid.arrange(grobs = plot.list)
print(p)
library(gridExtra)
de.markers.one <- de.markers[!duplicated(de.markers$cluster),]
plot.list <- list()
for (gene in de.markers.one$gene) {
expression.vector <- as.numeric(GetAssayData(se)[gene,])
plot.list[[gene]] <- spatial.plot(se,
plot.title = gene,
color.vector = expression.vector
)
}
p <- grid.arrange(grobs = plot.list,ncol = 4)
print(p)
paste("jej","dfdf")
library(gridExtra)
de.markers.one <- de.markers[!duplicated(de.markers$cluster),]
plot.list <- list()
for (gene in de.markers.one$gene) {
expression.vector <- as.numeric(GetAssayData(se)[gene,])
cluster.id <- de.markers.one[gene,"cluster"]
plot.title <- sprintf("Cluster %d | Gene : %s",cluster.id,gene)
plot.list[[gene]] <- spatial.plot(se,
plot.title = plot.title,
color.vector = expression.vector
)
}
p <- grid.arrange(grobs = plot.list,ncol = 4)
print(p)
top.5000 <- order(Matrix::rowSums(GetAssayData(se)))
top.5000 <- rownames(se)[top.5000]
top.5000
top.5000 <- order(Matrix::rowSums(GetAssayData(se)),decreasing = TRUE)
top.5000 <- rownames(se)[top.5000]
?LDA
data("AssociatedPress", package = "topicmodels")
AssociatedPress
str(AssociatedPress)
install.packages("tm")
install.packages("tm")
library(tm)
as.DocumentTermMatrix(GetAssayData(se)[top.5000,])
as.DocumentTermMatrix(GetAssayData(se)[top.5000,])
?as.TermDocumentMatrix
hh <- GetAssayData(se)[top.5000,]
hh
tidy(hh)
library(tidyr)
tidy(hh)
library(topicmodels)
tidy(hh)
library(tidytext)
install.packages(tidytext)
install.packages("tidytext")
install.packages("tidytext")
tidy(hh)
library(tidytext)
tidy(hh)
tidy(as.matrix(hh))
?tidy
hh
TermDocumentMatrix(as.matrix(hh))
as.TermDocumentMatrix(as.matrix(hh))
?as.TermDocumentMatrix
as.TermDocumentMatrix(as.matrix(hh),weighting = "weightTf")
aa <- as.TermDocumentMatrix(as.matrix(hh),weighting = "weightTf")
aa
str(aa)
aa <- as.TermDocumentMatrix(hh,weighting = "weightTf")
top.5000 <- order(Matrix::rowSums(GetAssayData(se)),decreasing = TRUE)
top.5000 <- rownames(se)[top.5000]
tdm <- as.TermDocumentMatrix(GetAssayData(subset(se,features = top.500)),
weighting = "weightTf")
tdm <- as.TermDocumentMatrix(GetAssayData(subset(se,features = top.5000)),
weighting = "weightTf")
tdm
lda.res <- LDA(tdm,
k = 5)
?LDA
lda.res <- LDA(as.DocumentTermMatrix(tdm),
k = 5)
tdm <- as.TermDocumentMatrix(GetAssayData(subset(se,features = top.5000)),
weighting = "weightTf")
lda.res <- LDA(as.DocumentTermMatrix(tdm),
k = 5)
library(tm)
lda.res <- LDA(as.DocumentTermMatrix(tdm),
k = 5)
?DocumentTermMatrix
lda.res <- LDA(DocumentTermMatrix(tdm),
k = 5)
?LDA
saveRDS(se,"/tmp/se.Rds")
loadRDS("/tmp/se.RDS")
load("/tmp/se.RDS")
load("/tmp/se.Rfs")
load("/tmp/se.Rds")
readRDS("/tmp/se.Rds")
se <- readRDS("/tmp/se.Rds")
top.5000 <- order(Matrix::rowSums(GetAssayData(se)),decreasing = TRUE)
top.5000 <- rownames(se)[top.5000]
tdm <- as.TermDocumentMatrix(GetAssayData(subset(se,features = top.5000)),
weighting = "weightTf")
tdm <- as.TermDocumentMatrix(GetAssayData(subset(se,features = top.5000)),
weighting = "weightTf")
lda.res <- LDA(DocumentTermMatrix(tdm),
k = 5)
lda.res <- LDA(as.DocumentTermMatrix(tdm),
k = 5)
lda.res <- LDA(as.DocumentTermMatrix(tdm),
k = 5)
